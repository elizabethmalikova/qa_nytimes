from graphql_tests.helper import base_url
import requests

query = """
query items($limit: Int, $offset: Int, $feedType: String!, $typeSlug: String, $stackupSlug: String, $itemType: String) {
  feed(limit: $limit, offset: $offset, feedType: $feedType, typeSlug: $typeSlug, stackupSlug: $stackupSlug, itemType: $itemType) {
    edges {
      node {
        id
        streamId
        object {
          ... on Article {
            id
            title
            description
            outboundUrl
            createdAt
            importSource
            discussionScore
            discussionSourceUrl
            flagged
            services {
              ...serviceFields
              __typename
            }
            owner {
              ... on Tool {
                name
                imageUrl
                canonicalUrl
                __typename
              }
              ... on Company {
                name
                imageUrl
                canonicalUrl
                __typename
              }
              __typename
            }
            __typename
          }
          ... on FeaturedPost {
            id
            author {
              ... on User {
                displayName
                path
                __typename
              }
              ... on Company {
                displayName
                path
                __typename
              }
              __typename
            }
            title
            description
            imageUrl
            views
            path
            relevanceStrength
            promoted
            services {
              ...serviceFields
              __typename
            }
            __typename
          }
          ... on StackDecision {
            ...stackDecisionAnswerFields
            __typename
          }
          ... on Stackup {
            id
            title
            path
            function
            services {
              ...serviceFields
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    pageInfo {
      hasNextPage
      __typename
    }
    __typename
  }
}

fragment stackDecisionAnswerFields on StackDecision {
  id
  showAutoGeneratedTag
  permissions {
    edit
    delete
    __typename
  }
  publicId
  htmlContent
  rawContent
  publishedAt
  private
  sample
  commentsCount
  upvotesCount
  upvoted
  flagged
  bookmarked
  viewCount
  draft
  createdAt
  decisionType
  private
  answers(first: 2) {
    count
    pageInfo {
      hasNextPage
      endCursor
      __typename
    }
    edges {
      node {
        ...stackDecisionFields
        __typename
      }
      __typename
    }
    __typename
  }
  subjectTools {
    ...serviceFields
    __typename
  }
  fromTools {
    ...serviceFields
    __typename
  }
  toTools {
    ...serviceFields
    __typename
  }
  link {
    url
    title
    imageUrl
    __typename
  }
  company {
    id
    path
    imageUrl
    name
    slug
    features {
      slug
      __typename
    }
    __typename
  }
  stack {
    ...stackFields
    __typename
  }
  topics {
    name
    __typename
  }
  services {
    ...serviceFields
    __typename
  }
  user {
    id
    username
    path
    imageUrl
    displayName
    title
    companyName
    __typename
  }
  rootComments {
    ...commentFields
    replies {
      ...commentFields
      parentId
      __typename
    }
    __typename
  }
  __typename
}

fragment stackFields on Stack {
  id
  imageUrl
  name
  identifier
  path
  private
  owner {
    ... on User {
      id
      imageUrl
      username
      __typename
    }
    ... on Company {
      id
      imageUrl
      slug
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment commentFields on Comment {
  id
  content
  postedAt
  upvoted
  flagged
  upvotesCount
  parentId
  user {
    id
    path
    imageUrl
    displayName
    __typename
  }
  __typename
}

fragment serviceFields on Tool {
  id
  name
  slug
  title
  verified
  imageUrl
  canonicalUrl
  path
  votes
  fans
  stacks
  following
  followContext
  __typename
}

fragment stackDecisionFields on StackDecision {
  id
  publicId
  htmlContent
  rawContent
  publishedAt
  commentsCount
  private
  upvotesCount
  upvoted
  flagged
  bookmarked
  viewCount
  draft
  createdAt
  decisionType
  private
  showAutoGeneratedTag
  permissions {
    edit
    delete
    __typename
  }
  subjectTools {
    ...serviceFields
    __typename
  }
  fromTools {
    ...serviceFields
    __typename
  }
  toTools {
    ...serviceFields
    __typename
  }
  link {
    url
    title
    imageUrl
    __typename
  }
  company {
    id
    path
    imageUrl
    name
    slug
    __typename
  }
  topics {
    name
    __typename
  }
  stack {
    ...stackFields
    __typename
  }
  services {
    ...serviceFields
    __typename
  }
  user {
    id
    username
    path
    imageUrl
    displayName
    title
    companyName
    __typename
  }
  rootComments {
    ...commentFields
    replies {
      ...commentFields
      parentId
      __typename
    }
    __typename
  }
  __typename
}
"""
variables = {
  "feedType": "all",
  "typeSlug": "",
  "offset": 0,
  "itemType": "all",
  "limit": 25
}


def test_items():
    response = requests.post(base_url, json={"query": query, "variables": variables})
    assert response.status_code == 200 and len(response.json()['data']['feed']['edges'][0]['node']['id']) > 0
    return response.json()['data']['feed']['edges'][0]['node']['id']